
import { useState, useEffect, useRef, useCallback } from "react";
import { useAuth } from "@/hooks/useAuth";
import type { SavedContent } from "@/types/saved-content";
import { useFetchContent } from "./useFetchContent";
import { useDeleteContent } from "./useDeleteContent";
import { REQUEST_COOLDOWN } from "./constants";

export function useSavedContentManagement() {
  const [content, setContent] = useState<SavedContent[]>([]);
  const didUnmount = useRef(false);
  const fetchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const initialFetchDone = useRef(false);
  const errorRetryCount = useRef(0);
  const refreshAttempts = useRef(0);
  const lastContentUpdate = useRef<number>(0);
  
  const { user, authReady } = useAuth();
  
  const {
    fetchContent,
    cancelFetch,
    invalidateCache,
    errors: fetchErrors,
    isLoading,
    isRefreshing,
    hasLoadedData,
    cleanupImageContent
  } = useFetchContent();
  
  const {
    handleDelete,
    deleteErrors,
    setDeleteErrors
  } = useDeleteContent();

  // Nettoyer les ressources √† la d√©monter du composant
  useEffect(() => {
    return () => {
      console.log("üßπ Nettoyage des ressources dans useSavedContentManagement");
      didUnmount.current = true;
      
      if (fetchTimeoutRef.current) {
        clearTimeout(fetchTimeoutRef.current);
        fetchTimeoutRef.current = null;
      }
      
      // CORRECTION: Ne pas annuler les requ√™tes en cours si des donn√©es ont √©t√© re√ßues
      if (!hasLoadedData.current) {
        console.log("üõë Annulation des requ√™tes en cours (aucune donn√©e re√ßue)");
        cancelFetch();
      } else {
        console.log("‚úÖ Pr√©servation du cache lors du d√©montage (donn√©es d√©j√† re√ßues)");
      }
      
      // Nettoyer les ressources des hooks d√©pendants
      cleanupImageContent?.();
    };
  }, [cancelFetch, cleanupImageContent, hasLoadedData]);

  // CORRECTION CRITIQUE: Chargement initial des donn√©es apr√®s l'authentification
  useEffect(() => {
    const loadInitialContent = async () => {
      // V√©rification pr√©alable pour √©viter les requ√™tes inutiles
      if (!authReady || !user || initialFetchDone.current) {
        console.log("üìã V√©rification initiale:", {
          authReady,
          user: user ? "connect√©" : "non connect√©",
          initialFetchDone: initialFetchDone.current
        });
        return;
      }
      
      // IMPORTANTE AM√âLIORATION: V√©rifier explicitement si l'utilisateur est authentifi√©
      if (!user.id) {
        console.error("‚ùå ID utilisateur non disponible, abandon du chargement");
        return;
      }
      
      console.log(`üîë Authentification pr√™te et utilisateur connect√© (ID: ${user.id}), chargement initial`);
      initialFetchDone.current = true;
      
      try {
        console.log("üì• D√©but du chargement initial...");
        // CORRECTION IMPORTANTE: Forcer le rafra√Æchissement et invalider le cache
        invalidateCache();
        
        const initialContent = await fetchContent({ forceRefresh: true });
        
        if (!didUnmount.current) {
          console.log(`üìä Chargement initial termin√©: ${initialContent.length} √©l√©ments`);
          
          // CORRECTION CRITIQUE: Mise √† jour synchrone
          if (initialContent.length > 0) {
            console.log("‚úÖ Mise √† jour de l'√©tat avec donn√©es initiales");
            setContent(initialContent);
            lastContentUpdate.current = Date.now();
          } else if (errorRetryCount.current < 2) {
            errorRetryCount.current++;
            console.log(`üîÑ Tentative de rechargement automatique (${errorRetryCount.current}/2)...`);
            
            // Attendre un d√©lai minimal avant de r√©essayer
            fetchTimeoutRef.current = setTimeout(async () => {
              console.log("üîÑ Ex√©cution du rechargement automatique");
              try {
                // Invalider le cache pour forcer une requ√™te fra√Æche
                invalidateCache();
                
                const retryContent = await fetchContent({ forceRefresh: true });
                
                if (!didUnmount.current) {
                  console.log(`‚úÖ Rechargement r√©ussi: ${retryContent.length} √©l√©ments`);
                  if (retryContent.length > 0) {
                    setContent(retryContent);
                    lastContentUpdate.current = Date.now();
                  }
                }
              } catch (error) {
                console.error("‚ùå √âchec du rechargement automatique:", error);
              }
            }, REQUEST_COOLDOWN / 2); // D√©lai r√©duit pour plus de r√©activit√©
          }
        }
      } catch (error) {
        console.error("‚ùå Erreur lors du chargement initial:", error);
      }
    };
    
    // CORRECTION IMPORTANTE: R√©duire le d√©lai pour une r√©activit√© imm√©diate
    if (authReady && user && !initialFetchDone.current) {
      console.log("‚è±Ô∏è Configuration du d√©lai pour le chargement initial");
      fetchTimeoutRef.current = setTimeout(loadInitialContent, REQUEST_COOLDOWN / 4);
    }
  }, [authReady, user, fetchContent, invalidateCache, cancelFetch]);

  // CORRECTION CRITIQUE: Fonction optimis√©e pour r√©cup√©rer les donn√©es
  const refreshContent = useCallback(async (): Promise<SavedContent[]> => {
    if (didUnmount.current) return [];
    
    if (!user || !user.id) {
      console.error("‚ùå Utilisateur non authentifi√© lors du rafra√Æchissement");
      return content;
    }
    
    const now = Date.now();
    const timeSinceLastUpdate = now - lastContentUpdate.current;
    
    try {
      console.log(`üîÑ Rafra√Æchissement forc√© du contenu (ID utilisateur: ${user.id})...`);
      // Augmenter le compteur de tentatives
      refreshAttempts.current += 1;
      
      // Si plusieurs tentatives √©chouent, invalider le cache
      if (refreshAttempts.current > 1) {
        console.log(`üßπ Invalidation du cache apr√®s ${refreshAttempts.current} tentatives`);
        invalidateCache();
      }
      
      // Si la derni√®re mise √† jour est trop r√©cente et que nous avons d√©j√† du contenu,
      // retourner le contenu actuel sans faire de requ√™te
      if (timeSinceLastUpdate < 600 && content.length > 0) {
        console.log(`‚è±Ô∏è Derni√®re mise √† jour trop r√©cente (${timeSinceLastUpdate}ms), contenu existant retourn√©`);
        return content;
      }
      
      // CORRECTION CRITIQUE: Forcer toujours un rafra√Æchissement
      const newContent = await fetchContent({ forceRefresh: true });
      
      if (!didUnmount.current) {
        console.log(`‚úÖ Rafra√Æchissement r√©ussi: ${newContent.length} √©l√©ments`);
        
        // CRUCIAL: Mettre √† jour imm√©diatement l'√©tat avec les donn√©es r√©cup√©r√©es
        if (newContent.length > 0) {
          setContent(newContent);
          lastContentUpdate.current = now;
        }
        
        // R√©initialiser le compteur de tentatives apr√®s un succ√®s
        if (newContent.length > 0) {
          refreshAttempts.current = 0;
        }
      }
      
      return newContent;
    } catch (error) {
      console.error("‚ùå Erreur lors du rafra√Æchissement du contenu:", error);
      return content;
    }
  }, [fetchContent, invalidateCache, content, user]);

  // Gestionnaire de suppression avec mise √† jour de l'√©tat local
  const handleContentDelete = useCallback(async (id: string, type: SavedContent['type']): Promise<void> => {
    if (!id || !type) {
      console.error("‚ùå ID ou type manquant pour la suppression");
      return;
    }
    
    if (!user || !user.id) {
      console.error("‚ùå Utilisateur non authentifi√© lors de la suppression");
      return;
    }
    
    console.log(`üóëÔ∏è Suppression de contenu demand√©e: ${id} (type: ${type}, utilisateur: ${user.id})`);
    const success = await handleDelete(id, type);
    
    if (success && !didUnmount.current) {
      console.log("‚úÖ Suppression r√©ussie, mise √† jour du state local");
      setContent(prev => prev.filter(item => item.id !== id));
      lastContentUpdate.current = Date.now();
      
      // Apr√®s une suppression r√©ussie, on invalide le cache
      invalidateCache();
    }
  }, [handleDelete, invalidateCache, user]);

  // Combiner les erreurs des diff√©rents hooks
  const errors = {
    ...fetchErrors,
    ...deleteErrors
  };

  return {
    content,
    errors,
    isLoading,
    isRefreshing,
    fetchContent: refreshContent,
    handleDelete: handleContentDelete,
    cleanup: cancelFetch,
    invalidateCache
  };
}
