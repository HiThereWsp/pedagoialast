
import { useState, useRef, useCallback } from "react";
import { MIN_REQUEST_INTERVAL } from "./constants";

/**
 * Hook pour g√©rer l'√©tat des requ√™tes
 */
export function useRequestStatus() {
  const [isLoadingInitial, setIsLoadingInitial] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  const fetchInProgress = useRef(false);
  const hasLoadedData = useRef(false);
  const retryCount = useRef(0);
  const requestCount = useRef(0);
  const lastRequestTime = useRef(0);
  const abortControllerRef = useRef<AbortController | null>(null);

  // V√©rifier si une requ√™te est en cours
  const isFetchInProgress = useCallback(() => {
    return fetchInProgress.current;
  }, []);

  // V√©rifier si des donn√©es ont √©t√© charg√©es
  const hasLoaded = useCallback(() => {
    return hasLoadedData.current;
  }, []);

  // V√©rifier si une requ√™te doit √™tre limit√©e en fr√©quence
  const shouldThrottleRequest = useCallback(() => {
    const now = Date.now();
    const elapsed = now - lastRequestTime.current;
    
    // Si moins de X secondes se sont √©coul√©es depuis la derni√®re requ√™te
    if (elapsed < MIN_REQUEST_INTERVAL) {
      console.log(`‚è±Ô∏è Requ√™te trop rapide (${elapsed}ms depuis la derni√®re). Attendre ${MIN_REQUEST_INTERVAL}ms minimum.`);
      return true;
    }
    
    return false;
  }, []);

  // Cr√©er un nouvel AbortController
  const createAbortController = useCallback(() => {
    if (!abortControllerRef.current) {
      abortControllerRef.current = new AbortController();
    }
    return abortControllerRef.current.signal;
  }, []);

  // Annuler une requ√™te en cours
  const abortRequest = useCallback(() => {
    if (abortControllerRef.current) {
      console.log("üõë Annulation d'une requ√™te en cours");
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
    }
  }, []);

  // D√©marrer une requ√™te
  const startRequest = useCallback(() => {
    fetchInProgress.current = true;
    lastRequestTime.current = Date.now();
    requestCount.current += 1;
    return requestCount.current;
  }, []);

  // Terminer une requ√™te
  const finishRequest = useCallback(() => {
    hasLoadedData.current = true;
    retryCount.current = 0;
    setIsLoadingInitial(false);
    setIsRefreshing(false);
    
    // D√©lai avant de permettre une nouvelle requ√™te pour √©viter les avalanches de requ√™tes
    setTimeout(() => {
      fetchInProgress.current = false;
    }, 800); // D√©lai r√©duit pour permettre des requ√™tes plus fr√©quentes
  }, []);

  // Incr√©menter le compteur de tentatives
  const incrementRetryCount = useCallback(() => {
    retryCount.current += 1;
    return retryCount.current;
  }, []);

  // R√©cup√©rer le compteur de tentatives
  const getRetryCount = useCallback(() => {
    return retryCount.current;
  }, []);

  // D√©finir l'√©tat de chargement
  const setLoading = useCallback((loading: boolean, refreshing: boolean = false) => {
    setIsLoadingInitial(loading);
    setIsRefreshing(refreshing);
  }, []);

  return {
    isLoadingInitial,
    isRefreshing,
    setLoading,
    isFetchInProgress,
    hasLoaded,
    shouldThrottleRequest,
    createAbortController,
    abortRequest,
    startRequest,
    finishRequest,
    incrementRetryCount,
    getRetryCount,
    getCurrentRequestCount: () => requestCount.current
  };
}
