
import { useEffect, useRef } from "react";
import { toast } from "../toast/toast"; // Utilisation directe de toast

/**
 * Hook for handling initial content loading with improved reliability
 */
export function useInitialContentLoad(
  didInitialFetch: React.MutableRefObject<boolean>,
  fetchContent: () => Promise<any[]>,
  forceRefresh: () => void,
  invalidateCache: () => void,
  authReady: boolean,
  user: any | null
) {
  // R√©f√©rence pour le timeout de chargement
  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Load data once after authentication
  useEffect(() => {
    const loadContentData = async () => {
      // Check if authentication is ready and user is logged in
      if (!authReady || !user) {
        console.log("‚è≥ En attente de l'authentification...");
        return;
      }
      
      if (!didInitialFetch.current) {
        console.log("üì• SavedContentPage: Chargement initial des donn√©es...");
        didInitialFetch.current = true;
        
        // D√©finir un timeout pour le chargement
        loadingTimeoutRef.current = setTimeout(() => {
          console.log("‚ö†Ô∏è Timeout de chargement atteint");
          toast({
            description: "Le chargement prend plus de temps que pr√©vu. R√©essayez ou actualisez la page.",
          });
        }, 15000); // 15 secondes
        
        forceRefresh();
        
        try {
          invalidateCache();
          
          const data = await fetchContent();
          
          // Annuler le timeout puisque le chargement a r√©ussi
          if (loadingTimeoutRef.current) {
            clearTimeout(loadingTimeoutRef.current);
            loadingTimeoutRef.current = null;
          }
          
          console.log(`‚úÖ SavedContentPage: Chargement initial termin√©: ${data.length} √©l√©ments charg√©s`);
          
          if (data.length === 0) {
            console.log("üîÑ SavedContentPage: Aucun contenu trouv√©, tentative de rechargement forc√©");
            
            invalidateCache();
            
            setTimeout(async () => {
              try {
                forceRefresh();
                
                const refreshedData = await fetchContent();
                console.log(`üìä SavedContentPage: Rechargement forc√© termin√©: ${refreshedData.length} √©l√©ments`);
                
                if (refreshedData.length === 0) {
                  toast({
                    description: "Aucun contenu trouv√©. Cr√©ez votre premier contenu !",
                  });
                }
              } catch (error) {
                console.error("‚ùå Erreur lors du rechargement forc√©:", error);
                toast({
                  variant: "destructive",
                  description: "Erreur lors du chargement des donn√©es. Veuillez r√©essayer.",
                });
              }
            }, 600);
          }
        } catch (err) {
          console.error("‚ùå SavedContentPage: Erreur lors du chargement initial:", err);
          
          // Annuler le timeout puisque le chargement a √©chou√©
          if (loadingTimeoutRef.current) {
            clearTimeout(loadingTimeoutRef.current);
            loadingTimeoutRef.current = null;
          }
          
          toast({
            variant: "destructive",
            description: "Erreur lors du chargement des donn√©es. Veuillez r√©essayer.",
          });
        }
      }
    };
    
    loadContentData();
    
    return () => {
      // Nettoyer le timeout lors du d√©montage
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
        loadingTimeoutRef.current = null;
      }
    };
  }, [fetchContent, forceRefresh, invalidateCache, authReady, user, didInitialFetch]);
}
