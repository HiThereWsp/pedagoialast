
import { useState, useEffect, useRef, useCallback } from "react";
import type { SavedContent } from "@/types/saved-content";

/**
 * Hook pour stabiliser le contenu et √©viter les rechargements intempestifs
 * en gardant une r√©f√©rence stable aux donn√©es d√©j√† charg√©es
 */
export function useStableContent() {
  const [stableContent, setStableContent] = useState<SavedContent[]>([]);
  const contentTimestamp = useRef<number>(0);
  const isInitialLoad = useRef(true);
  const previousContentRef = useRef<SavedContent[]>([]);
  const contentUpdateCount = useRef<number>(0);
  const pendingUpdateTimer = useRef<ReturnType<typeof setTimeout> | null>(null);
  const forcedUpdate = useRef<boolean>(false);

  // Fonction pour mettre √† jour le contenu de mani√®re stable
  const updateContent = useCallback((newContent: SavedContent[]) => {
    // Nettoyer tout timer en attente
    if (pendingUpdateTimer.current) {
      clearTimeout(pendingUpdateTimer.current);
      pendingUpdateTimer.current = null;
    }
    
    // Log d√©taill√© de l'op√©ration de mise √† jour
    console.log("üìä useStableContent.updateContent: Tentative de mise √† jour du contenu stable", {
      nouveauxElements: newContent.length,
      elementsExistants: stableContent.length,
      estChargementInitial: isInitialLoad.current,
      miseAJourCount: contentUpdateCount.current,
      forcedUpdate: forcedUpdate.current
    });
    
    // Forcer la mise √† jour si demand√© explicitement
    if (forcedUpdate.current) {
      console.log("üî• Mise √† jour forc√©e du contenu stable");
      contentUpdateCount.current += 1;
      setStableContent(newContent);
      previousContentRef.current = [...newContent];
      contentTimestamp.current = Date.now();
      isInitialLoad.current = false;
      forcedUpdate.current = false;
      return;
    }
    
    // Si le nouveau contenu a des √©l√©ments, le mettre √† jour imm√©diatement
    if (newContent.length > 0) {
      const hasChanges = hasContentChanged(previousContentRef.current, newContent);
      
      if (hasChanges || isInitialLoad.current) {
        console.log(`‚úÖ Mise √† jour du contenu stable avec ${newContent.length} √©l√©ments`);
        contentUpdateCount.current += 1;
        setStableContent(newContent);
        previousContentRef.current = [...newContent];
        contentTimestamp.current = Date.now();
        isInitialLoad.current = false;
      } else {
        console.log("‚ÑπÔ∏è Contenu inchang√©, pas de mise √† jour");
      }
      return;
    }
    
    // AM√âLIORATION: Si le nouveau contenu est vide et que nous avons d√©j√† du contenu, ne pas √©craser 
    // le contenu existant imm√©diatement, attendre un peu pour voir si d'autres mises √† jour arrivent
    if (newContent.length === 0 && !isInitialLoad.current && stableContent.length > 0) {
      console.log("‚è±Ô∏è Contenu vide re√ßu mais contenu existant pr√©serv√© temporairement");
      
      // Attendre seulement 2 secondes avant de consid√©rer que le contenu est vraiment vide (r√©duit de 3s √† 2s)
      pendingUpdateTimer.current = setTimeout(() => {
        // V√©rifier une derni√®re fois si l'√©tat est toujours le m√™me
        console.log("‚è±Ô∏è D√©lai d'attente √©coul√© pour la validation du contenu vide");
        
        // V√©rifier si on a re√ßu une mise √† jour entre temps
        const hasChanges = hasContentChanged(previousContentRef.current, newContent);
        
        if (hasChanges) {
          console.log("‚úÖ Mise √† jour du contenu stable avec contenu vide apr√®s d√©lai");
          contentUpdateCount.current += 1;
          setStableContent(newContent);
          previousContentRef.current = [...newContent];
          contentTimestamp.current = Date.now();
        } else {
          console.log("‚ö†Ô∏è Ignor√© la mise √† jour avec un tableau vide apr√®s d√©lai");
        }
      }, 2000);
      
      return;
    }

    const currentTime = Date.now();
    
    // Cas de figure o√π on applique la mise √† jour imm√©diatement:
    // - C'est le chargement initial (pour avoir des donn√©es au d√©part)
    // - Ou si le contenu n'est pas vide
    // - Ou si au moins 1.5 secondes se sont √©coul√©es depuis la derni√®re mise √† jour (r√©duit de 2s √† 1.5s)
    if (isInitialLoad.current || 
        newContent.length > 0 || 
        currentTime - contentTimestamp.current > 1500) {
      
      // Comparer les identifiants pour √©viter les mises √† jour inutiles
      const hasChanges = hasContentChanged(previousContentRef.current, newContent);
      
      if (hasChanges || isInitialLoad.current) {
        console.log(`‚úÖ Mise √† jour du contenu stable (${newContent.length} √©l√©ments)`);
        contentUpdateCount.current += 1;
        setStableContent(newContent);
        previousContentRef.current = [...newContent];
        contentTimestamp.current = currentTime;
        isInitialLoad.current = false;
      } else {
        console.log("‚ÑπÔ∏è Contenu inchang√©, pas de mise √† jour");
      }
    } else {
      console.log("‚è±Ô∏è D√©lai minimum non respect√©, mise √† jour ignor√©e");
    }
  }, [stableContent.length]);

  // Nettoyer les ressources lors du d√©montage
  useEffect(() => {
    return () => {
      if (pendingUpdateTimer.current) {
        clearTimeout(pendingUpdateTimer.current);
        pendingUpdateTimer.current = null;
      }
    };
  }, []);

  // V√©rifie si le contenu a chang√© en comparant les IDs et autres propri√©t√©s
  const hasContentChanged = (oldContent: SavedContent[], newContent: SavedContent[]): boolean => {
    // Si l'un des tableaux est vide et l'autre non, il y a un changement
    if (!oldContent.length && newContent.length) {
      console.log("üîÑ Changement d√©tect√©: ancien contenu vide, nouveau contenu pr√©sent");
      return true;
    }
    
    if (oldContent.length && !newContent.length) {
      console.log("üîÑ Changement d√©tect√©: ancien contenu pr√©sent, nouveau contenu vide");
      return true;
    }
    
    if (oldContent.length !== newContent.length) {
      console.log("üîÑ Changement d√©tect√©: nombre d'√©l√©ments diff√©rent");
      return true;
    }
    
    // AM√âLIORATION: V√©rifier aussi le nombre d'√©l√©ments par type pour une d√©tection plus pr√©cise
    const countByType = (content: SavedContent[], type: string) => 
      content.filter(item => item.type === type).length;
    
    const types = ['lesson-plan', 'exercise', 'Image', 'correspondence'];
    for (const type of types) {
      const oldCount = countByType(oldContent, type);
      const newCount = countByType(newContent, type);
      if (oldCount !== newCount) {
        console.log(`üîÑ Changement d√©tect√©: nombre d'√©l√©ments de type ${type} diff√©rent (${oldCount} ‚Üí ${newCount})`);
        return true;
      }
    }
    
    // Cr√©er des ensembles d'IDs pour une comparaison rapide
    const oldIds = new Set(oldContent.map(item => item.id));
    const newIds = new Set(newContent.map(item => item.id));
    
    // V√©rifier si tous les IDs du nouveau contenu sont dans l'ancien
    for (const id of newIds) {
      if (!oldIds.has(id)) {
        console.log(`üîÑ Changement d√©tect√©: nouvel √©l√©ment ${id}`);
        return true;
      }
    }
    
    // V√©rifier si tous les IDs de l'ancien contenu sont dans le nouveau
    for (const id of oldIds) {
      if (!newIds.has(id)) {
        console.log(`üîÑ Changement d√©tect√©: √©l√©ment supprim√© ${id}`);
        return true;
      }
    }
    
    // AM√âLIORATION: V√©rifier les dates de mise √† jour pour d√©tecter les modifications
    for (let i = 0; i < oldContent.length; i++) {
      const oldItem = oldContent[i];
      const newItem = newContent.find(item => item.id === oldItem.id);
      
      if (newItem && oldItem.updated_at !== newItem.updated_at) {
        console.log(`üîÑ Changement d√©tect√©: √©l√©ment ${oldItem.id} modifi√©`);
        return true;
      }
    }
    
    return false;
  };

  // Force le rafra√Æchissement du contenu
  const forceRefresh = useCallback(() => {
    console.log("üîÑ For√ßage de la mise √† jour du contenu stable");
    isInitialLoad.current = true;
    forcedUpdate.current = true;
  }, []);

  return { 
    stableContent, 
    updateContent,
    forceRefresh
  };
}
