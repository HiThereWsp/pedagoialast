import { useCallback, useState, useRef } from "react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import type { SavedContent } from "@/types/saved-content";
import { FetchConfig } from "./types";
import { useContentRetrieval } from "./useContentRetrieval";
import { useFetchAbortController } from "./useFetchAbortController";
import { useContentProcessing } from "./useContentProcessing";
import { useRetryStrategy } from "./useRetryStrategy";

export function useFetchContent() {
  const [isLoadingInitial, setIsLoadingInitial] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const hasLoadedData = useRef(false);
  
  const { user, authReady } = useAuth();
  const { toast } = useToast();

  const {
    shouldThrottleRequest,
    createAbortController,
    abortRequest,
    markRequestStart,
    markRequestEnd,
    isFetchInProgress
  } = useFetchAbortController();
  
  const {
    savePartialContent,
    processFinalContent,
    handleFetchError,
    getCachedContent,
    updateCache,
    getPendingContent,
    updatePendingContent,
    setDataReceived,
    hasDataReceived,
    invalidateCache
  } = useContentProcessing();
  
  const {
    startRequest,
    resetRetryCount,
    incrementRetryCount,
    handleRetry
  } = useRetryStrategy();

  const {
    retrieveExercises,
    retrieveLessonPlans,
    retrieveCorrespondences,
    retrieveImages,
    retrieveMusicLessons,
    isContentLoading
  } = useContentRetrieval();

  // Fonction am√©lior√©e qui n'annule que les requ√™tes non termin√©es et pr√©serve les donn√©es partielles
  const cancelFetch = useCallback(() => {
    savePartialContent();
    abortRequest();
  }, [abortRequest, savePartialContent]);

  // D√©finir l'√©tat de chargement
  const setLoading = useCallback((loading: boolean, refreshing: boolean = false) => {
    setIsLoadingInitial(loading);
    setIsRefreshing(refreshing);
  }, []);

  const fetchContent = useCallback(async ({ forceRefresh = false, signal }: FetchConfig = {}): Promise<SavedContent[]> => {
    // üìã DEBUG: V√©rification de l'√©tat d'authentification
    console.log("üìã DEBUG: √âtat d'authentification avant fetchContent", { 
      user: user ? "connect√©" : "non connect√©", 
      userID: user?.id,
      authReady, 
      cacheSize: getCachedContent().length,
      dataWasReceived: hasDataReceived()
    });
    
    // Pour un rafra√Æchissement forc√©, r√©initialiser la r√©f√©rence de donn√©es re√ßues
    if (forceRefresh) {
      setDataReceived(false);
    }
    
    // Si nous avons des donn√©es en cache et ce n'est pas un rafra√Æchissement forc√©, retourner le cache
    const cachedContent = getCachedContent();
    if (cachedContent.length > 0 && !forceRefresh) {
      console.log(`üîÑ Utilisation du cache: ${cachedContent.length} √©l√©ments`);
      return cachedContent;
    }
    
    // Si l'utilisateur n'est pas authentifi√© ou le processus d'authentification n'est pas termin√©
    if (!user && authReady) {
      console.log("‚ùå Aucun utilisateur connect√©, abandon du chargement");
      setLoading(false);
      return [];
    }
    
    // Limiter la fr√©quence des requ√™tes - mais ne pas bloquer les requ√™tes forc√©es
    if (!forceRefresh && shouldThrottleRequest()) {
      console.log("‚è±Ô∏è Requ√™te limit√©e en fr√©quence, utilisation du cache disponible");
      return getCachedContent();
    }
    
    // Cr√©er un nouveau contr√¥leur d'annulation si besoin
    const abortSignal = signal || createAbortController();
    
    // Incr√©menter le compteur de requ√™tes pour le d√©bogage
    const currentRequest = startRequest();
    markRequestStart();
    
    try {
      if (forceRefresh) {
        setLoading(false, true);
        console.log(`üîÑ [Requ√™te ${currentRequest}] Rafra√Æchissement forc√© des donn√©es`);
      } else {
        console.log(`üîÑ [Requ√™te ${currentRequest}] D√©but de la r√©cup√©ration des contenus sauvegard√©s...`);
      }
      
      // AJOUT: V√©rification suppl√©mentaire du statut utilisateur
      if (!user) {
        console.log(`‚ùå [Requ√™te ${currentRequest}] Utilisateur non disponible apr√®s d√©lai, abandon`);
        return getCachedContent();
      }
      
      console.log(`üë§ [Requ√™te ${currentRequest}] Utilisateur authentifi√©: ${user.id}`);
      
      // V√©rifier si la requ√™te n'a pas √©t√© annul√©e
      if (abortSignal.aborted) {
        console.log(`üõë [Requ√™te ${currentRequest}] Requ√™te annul√©e avant r√©cup√©ration, abandon`);
        return getCachedContent();
      }
      
      // R√©cup√©rer les donn√©es de mani√®re s√©quentielle pour √©viter les probl√®mes de charge
      updatePendingContent(null);
      
      // 1. R√©cup√©rer les exercices
      const exercises = await retrieveExercises(abortSignal, forceRefresh, currentRequest);
      
      // 2. R√©cup√©rer les plans de le√ßon
      const lessonPlans = await retrieveLessonPlans(abortSignal, forceRefresh, currentRequest);
      
      // 3. R√©cup√©rer les correspondances
      const correspondences = await retrieveCorrespondences(abortSignal, forceRefresh, currentRequest);
      
      // 4. R√©cup√©rer les images
      const images = await retrieveImages(abortSignal, forceRefresh, currentRequest);
      
      // 5. R√©cup√©rer les le√ßons en musique
      const musicLessons = await retrieveMusicLessons(abortSignal, forceRefresh, currentRequest);
      
      // CORRECTION CRITIQUE: M√™me si la requ√™te est annul√©e, utiliser les donn√©es partielles
      if (abortSignal.aborted) {
        console.log(`üõë [Requ√™te ${currentRequest}] Requ√™te annul√©e avant finalisation`);
        const partialContent = getPendingContent();
        
        if (partialContent && partialContent.length > 0) {
          console.log(`üîÜ [Requ√™te ${currentRequest}] Utilisation des donn√©es partielles: ${partialContent.length} √©l√©ments`);
          // Trier les donn√©es partielles avant de les retourner
          const sortedPartialContent = processFinalContent(partialContent);
          
          // Mettre √† jour le cache avec les donn√©es partielles
          updateCache(sortedPartialContent);
          updatePendingContent(null);
          
          return sortedPartialContent;
        }
        
        return getCachedContent();
      }

      console.log(`üìä [Requ√™te ${currentRequest}] Donn√©es r√©cup√©r√©es:`, {
        exercises: exercises?.length || 0,
        lessonPlans: lessonPlans?.length || 0,
        correspondences: correspondences?.length || 0,
        images: images?.length || 0,
        musicLessons: musicLessons?.length || 0
      });
      
      // Combiner toutes les donn√©es et les trier par date
      const allContent = [
        ...exercises, 
        ...lessonPlans, 
        ...correspondences,
        ...images,
        ...musicLessons
      ].filter(Boolean);

      // Trier et finaliser le contenu
      const sortedContent = processFinalContent(allContent);
      
      console.log(`‚úÖ [Requ√™te ${currentRequest}] R√©cup√©ration termin√©e avec ${sortedContent.length} √©l√©ments`);
      
      // CORRECTION CRITIQUE: Si on a re√ßu des donn√©es, mettre √† jour le cache m√™me si sortedContent est vide
      if (sortedContent.length > 0 || hasDataReceived()) {
        console.log(`‚úÖ [Requ√™te ${currentRequest}] Mise √† jour du cache avec ${sortedContent.length} √©l√©ments`);
        updateCache(sortedContent);
        updatePendingContent(null);
      } else {
        console.log(`‚ö†Ô∏è [Requ√™te ${currentRequest}] R√©sultat vide mais cache existant pr√©serv√©`);
      }
      
      return sortedContent;

    } catch (err) {
      handleFetchError(err, currentRequest);
      
      if (abortSignal.aborted) {
        // Utiliser les donn√©es partielles si disponibles
        const pendingContent = getPendingContent();
        if (pendingContent && pendingContent.length > 0) {
          console.log(`üîÜ [Requ√™te ${currentRequest}] Utilisation des donn√©es partielles malgr√© erreur: ${pendingContent.length} √©l√©ments`);
          updateCache(pendingContent);
          updatePendingContent(null);
        }
        return getCachedContent();
      }

      // Gestion des tentatives avec d√©lai progressif
      const shouldRetry = await handleRetry(forceRefresh, abortSignal);
      if (shouldRetry) {
        incrementRetryCount();
        return fetchContent({ forceRefresh: true, signal: abortSignal });
      }
      
      // CORRECTION: Toujours retourner le cache m√™me en cas d'erreur
      return getCachedContent();
    } finally {
      markRequestEnd();
      hasLoadedData.current = true;
      resetRetryCount();
      setLoading(false);
      setIsRefreshing(false);
    }
  }, [
    user, 
    authReady,
    shouldThrottleRequest,
    createAbortController,
    startRequest,
    markRequestStart,
    markRequestEnd,
    resetRetryCount,
    retrieveExercises,
    retrieveLessonPlans,
    retrieveCorrespondences,
    retrieveImages,
    retrieveMusicLessons,
    getPendingContent,
    updatePendingContent,
    processFinalContent,
    hasDataReceived,
    setDataReceived,
    getCachedContent,
    updateCache,
    handleRetry,
    incrementRetryCount,
    handleFetchError,
    setLoading
  ]);

  const hasLoaded = useCallback(() => {
    return hasLoadedData.current;
  }, []);

  return {
    fetchContent,
    cancelFetch,
    invalidateCache,
    errors: {},  // Maintenant g√©r√© par useContentErrors
    isLoading: isLoadingInitial || isContentLoading,
    isRefreshing,
    hasLoadedData: hasLoaded,
    cleanupImageContent: cancelFetch
  };
}
