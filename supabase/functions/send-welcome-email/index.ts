import { serve } from "https://deno.land/std@0.190.0/http/server.ts"

const BREVO_API_KEY = Deno.env.get('BREVO_API_KEY')
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface EmailPayload {
  userId: string;
  email: string;
  firstName: string;
}

const handler = async (req: Request): Promise<Response> => {
  console.log('üöÄ D√©marrage de la fonction send-welcome-email')
  console.log('üìù M√©thode de la requ√™te:', req.method)
  
  if (req.method === 'OPTIONS') {
    console.log('OPTIONS request received')
    return new Response(null, { headers: corsHeaders })
  }

  try {
    if (!BREVO_API_KEY) {
      console.error('‚ùå BREVO_API_KEY manquante dans les variables d\'environnement')
      throw new Error('BREVO_API_KEY n\'est pas configur√©e')
    }

    console.log('üìß Lecture du corps de la requ√™te...')
    const payload: EmailPayload = await req.json()
    console.log('üìù Payload re√ßu:', payload)

    console.log('üìß Pr√©paration de l\'email avec Brevo')
    const emailData = {
      sender: {
        name: 'PedagoIA',
        email: 'contact@pedagoia.fr'
      },
      to: [{
        email: payload.email,
        name: payload.firstName
      }],
      subject: 'Bienvenue sur PedagoIA !',
      htmlContent: `
        <h1>Bienvenue ${payload.firstName} !</h1>
        <p>Nous sommes ravis de vous accueillir sur PedagoIA.</p>
        <p>Notre assistant p√©dagogique intelligent est l√† pour vous aider √† cr√©er des contenus p√©dagogiques innovants et personnalis√©s.</p>
        <p>N'h√©sitez pas √† explorer toutes nos fonctionnalit√©s :</p>
        <ul>
          <li>Cr√©ation de s√©quences p√©dagogiques</li>
          <li>G√©n√©ration d'exercices diff√©renci√©s</li>
          <li>R√©daction de correspondances</li>
        </ul>
        <p>Si vous avez des questions, notre √©quipe est l√† pour vous accompagner.</p>
        <p>Bonne d√©couverte !</p>
        <p>L'√©quipe PedagoIA</p>
      `
    }
    console.log('üìù Donn√©es de l\'email pr√©par√©es:', emailData)

    console.log('üì§ Envoi de la requ√™te √† l\'API Brevo...')
    const response = await fetch('https://api.brevo.com/v3/smtp/email', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'api-key': BREVO_API_KEY,
      },
      body: JSON.stringify(emailData)
    })

    console.log('üì• R√©ponse re√ßue de Brevo:', {
      status: response.status,
      statusText: response.statusText
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erreur d√©taill√©e de Brevo:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText,
        headers: Object.fromEntries(response.headers.entries())
      })
      throw new Error(`Erreur lors de l'envoi de l'email: ${errorText}`)
    }

    const result = await response.json()
    console.log('‚úÖ Email envoy√© avec succ√®s:', result)

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e dans send-welcome-email:', {
      name: error.name,
      message: error.message,
      stack: error.stack,
      cause: error.cause
    })
    return new Response(JSON.stringify({ 
      error: error.message,
      stack: error.stack,
      name: error.name
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    })
  }
}

serve(handler)