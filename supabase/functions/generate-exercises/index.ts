
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

// Types pour Mistral AI
interface Message {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface GenerationParams {
  subject: string;
  classLevel: string;
  numberOfExercises: number;
  questionsPerExercise: number;
  objective: string;
  exerciseType?: string;
  additionalInstructions?: string;
  specificNeeds?: string;
  originalExercise?: string;
  studentProfile?: string;
  learningDifficulties?: string;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

function buildSystemPrompt(): string {
  return `Tu es un assistant p√©dagogique expert dans la cr√©ation d'exercices scolaires adapt√©s au syst√®me √©ducatif fran√ßais.
Ton objectif est de g√©n√©rer des exercices pertinents, clairs et adapt√©s au niveau demand√©.
Format de r√©ponse attendu :
1. Une fiche √©l√®ve contenant les exercices
2. Une fiche p√©dagogique pour l'enseignant contenant les corrections et des conseils`
}

function buildPrompt(params: GenerationParams): Message[] {
  const messages: Message[] = [
    {
      role: 'system',
      content: buildSystemPrompt()
    }
  ]

  let userPrompt = `Cr√©e ${params.numberOfExercises} exercices de ${params.subject} pour une classe de ${params.classLevel}.
Objectif p√©dagogique : ${params.objective}
${params.exerciseType ? `Type d'exercice souhait√© : ${params.exerciseType}` : ''}
${params.additionalInstructions ? `Instructions suppl√©mentaires : ${params.additionalInstructions}` : ''}
${params.specificNeeds ? `Besoins sp√©cifiques : ${params.specificNeeds}` : ''}
${params.studentProfile ? `Profil de l'√©l√®ve : ${params.studentProfile}` : ''}
${params.learningDifficulties ? `Difficult√©s d'apprentissage : ${params.learningDifficulties}` : ''}`

  messages.push({
    role: 'user',
    content: userPrompt
  })

  return messages
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  const startTime = Date.now()
  try {
    const MISTRAL_API_KEY = Deno.env.get('MISTRAL_API_KEY')
    if (!MISTRAL_API_KEY) {
      throw new Error('Cl√© API Mistral non configur√©e')
    }

    const params = await req.json()
    console.log('üîµ Param√®tres re√ßus:', {
      ...params,
      MISTRAL_API_KEY: '***' // Masquer la cl√© dans les logs
    })

    // Validation des param√®tres requis
    if (!params.subject || !params.classLevel || !params.objective) {
      throw new Error('Param√®tres requis manquants')
    }

    const messages = buildPrompt(params)

    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: messages,
        temperature: 0.4, // Temp√©rature r√©duite pour plus de coh√©rence
        max_tokens: 2000
      })
    })

    if (!response.ok) {
      const error = await response.text()
      console.error('‚ùå Erreur Mistral AI:', error)
      throw new Error(`Erreur API Mistral: ${response.status}`)
    }

    const data = await response.json()
    const content = data.choices[0].message.content

    console.log('‚úÖ Exercices g√©n√©r√©s en', Date.now() - startTime, 'ms')

    return new Response(
      JSON.stringify({ exercises: content }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error)
    
    return new Response(
      JSON.stringify({ 
        error: 'Une erreur est survenue lors de la g√©n√©ration des exercices', 
        details: error.message 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})
