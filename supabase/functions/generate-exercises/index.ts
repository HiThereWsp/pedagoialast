
import { serve } from "https://deno.land/std@0.177.0/http/server.ts"
import "https://deno.land/x/xhr@0.3.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Content-Type': 'application/json'
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const requestData = await req.json();
    const { 
      subject, 
      classLevel, 
      objective,
      numberOfExercises = 4,
      questionsPerExercise = 5,
      exerciseType = '',
      additionalInstructions = '',
      specificNeeds = '',
      originalExercise = '',
      studentProfile = '',
      learningDifficulties = '',
      isDifferentiation = false
    } = requestData;

    console.log("üìù D√©but de la g√©n√©ration pour:", { 
      subject, classLevel, objective
    });

    const baseSystemPrompt = `Tu es un expert en p√©dagogie sp√©cialis√© dans la cr√©ation d'exercices. 
Ta mission est de cr√©er une fiche d'exercices claire et structur√©e en suivant ces r√®gles strictes :
- Titres EN MAJUSCULES sans formatage
- Alignement gauche strict
- Num√©rotation simple (1., 2., etc.)
- Espace simple entre sections
- Retour √† la ligne si n√©cessaire
- Langage adapt√© au niveau ${classLevel}`;

    const generatePrompt = `
G√©n√®re des exercices scolaires pour ${subject} niveau ${classLevel}.

STRUCTURE STRICTE √Ä SUIVRE :

FICHE √âL√àVE
[EXERCICE X] (r√©p√©ter ${numberOfExercises} fois)
Consigne :
[${questionsPerExercise} questions maximum]

FICHE P√âDAGOGIQUE
[EXERCICE X]
OBJECTIFS : ${objective}
MAT√âRIEL N√âCESSAIRE : [√† d√©duire selon le contexte]
NOTIONS PR√âALABLES : [√† d√©duire selon le niveau/objectif]
CORRIG√â :
1. R√©ponse br√®ve
   Explicitation (2 phrases max)
${additionalInstructions ? `Instructions suppl√©mentaires : ${additionalInstructions}` : ''}

FICHE √âL√àVE AVEC CORRECTION EXPLIQU√âE
1. Question
Correction : Phrase unique
Explication : 1-2 phrases claires`;

    const differentiatePrompt = `
Adapte cet exercice pour ${classLevel} avec les besoins sp√©cifiques suivants : ${specificNeeds}

EXERCICE ORIGINAL :
${originalExercise}

STRUCTURE DE SORTIE :
FICHE √âL√àVE (adapt√©e)
[M√™me format que l'original mais adapt√©]

FICHE P√âDAGOGIQUE
OBJECTIFS : ${objective}
MAT√âRIEL N√âCESSAIRE : [√† d√©duire + adaptations n√©cessaires]
NOTIONS PR√âALABLES : [√† d√©duire + points d'attention]
ADAPTATIONS SP√âCIFIQUES : 
- Pour le profil : ${studentProfile}
- Difficult√©s : ${learningDifficulties}
CORRIG√â :
[Format standard avec adaptations]

FICHE √âL√àVE AVEC CORRECTION EXPLIQU√âE
[Version adapt√©e avec explications simplifi√©es si n√©cessaire]`;

    console.log('ü§ñ Initialisation de la requ√™te OpenAI...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: baseSystemPrompt },
          { role: 'user', content: isDifferentiation ? differentiatePrompt : generatePrompt }
        ],
        temperature: 0.7,
        max_tokens: 1000,
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Erreur OpenAI:', errorText);
      throw new Error(`Erreur API OpenAI: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse OpenAI re√ßue');
    
    if (!data?.choices?.[0]?.message?.content) {
      throw new Error('Contenu de la r√©ponse invalide');
    }

    const exercises = data.choices[0].message.content;
    const cleanedExercises = exercises
      .replace(/###/g, '')
      .replace(/---/g, '')
      .replace(/\n\s+\n/g, '\n\n')
      .replace(/^\s+/gm, '')
      .replace(/\[EXERCICE/g, '\n[EXERCICE')
      .replace(/\n{3,}/g, '\n\n')
      .trim();

    console.log('‚úÖ Exercices g√©n√©r√©s et format√©s avec succ√®s');

    return new Response(
      JSON.stringify({ exercises: cleanedExercises }), 
      { headers: corsHeaders }
    );

  } catch (error) {
    console.error('‚ùå Erreur dans la fonction generate-exercises:', error);
    
    const errorResponse = {
      error: error.message,
      details: 'Une erreur est survenue lors de la g√©n√©ration des exercices'
    };

    return new Response(
      JSON.stringify(errorResponse), 
      { 
        status: 500,
        headers: corsHeaders
      }
    );
  }
});
