
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

const MISTRAL_API_KEY = Deno.env.get('MISTRAL_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (!MISTRAL_API_KEY) {
    throw new Error('Cl√© API Mistral non configur√©e');
  }

  try {
    const params = await req.json();
    console.log('üìù Param√®tres re√ßus:', JSON.stringify(params, null, 2));

    const systemPrompt = `Tu es un assistant p√©dagogique expert qui cr√©e des exercices adapt√©s au syst√®me √©ducatif fran√ßais.

R√àGLES DE FORMATAGE STRICTES:
1. JAMAIS de tableaux HTML ou Markdown. Utilise des listes num√©rot√©es et des puces √† la place.
2. Commence directement avec les exercices, sans titre ni introduction.
3. G√©n√®re TOUJOURS deux sections distinctes avec EXACTEMENT ces marqueurs :

FICHE √âL√àVE
[Exercices uniquement, sans titre ni pr√©ambule. PAS de mention de "Titre de la s√©quence" ou d'objectifs.]

FICHE CORRECTION
[Correction D√âTAILL√âE et COMPL√àTE de chaque exercice avec explications d√©velopp√©es et p√©dagogiques.]

4. NE JAMAIS ajouter de texte avant "FICHE √âL√àVE" ni entre les sections.
5. Utilise des formats suivants pour structurer ton contenu:
   - Exercice 1: (description)
   - Question 1.a: (question)
   - Liste de points: utilise des puces (-)
   - √ânum√©ration: utilise des nombres (1., 2., 3.)
6. JAMAIS de balises HTML, de colonnes ou de mise en page complexe.
7. Chaque exercice doit avoir sa correction correspondante dans la FICHE CORRECTION.
8. La FICHE CORRECTION doit √™tre D√âTAILL√âE avec des explications p√©dagogiques.`;

    const userPrompt = isDifferentiationRequest(params) 
      ? buildDifferentiationPrompt(params) 
      : buildStandardPrompt(params);

    console.log('üì§ Envoi du prompt √† Mistral AI');

    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('‚ùå Erreur de l\'API Mistral:', error);
      throw new Error(`Erreur API Mistral: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ G√©n√©ration r√©ussie, v√©rification des sections...');
    
    let result = data.choices[0].message.content;

    // Post-traitement pour supprimer tout texte avant "FICHE √âL√àVE"
    const studentMarker = "FICHE √âL√àVE";
    const correctionMarker = "FICHE CORRECTION";
    
    const studentIndex = result.indexOf(studentMarker);
    const correctionIndex = result.indexOf(correctionMarker);
    
    if (studentIndex === -1 || correctionIndex === -1) {
      console.error(`‚ùå Sections manquantes. studentIndex: ${studentIndex}, correctionIndex: ${correctionIndex}`);
      
      // Reformater la r√©ponse si les sections sont manquantes
      let reformattedResult = "";
      
      if (studentIndex === -1 && correctionIndex === -1) {
        // Aucun marqueur trouv√©, consid√©rer tout comme fiche √©l√®ve et ajouter une correction g√©n√©rique
        reformattedResult = `FICHE √âL√àVE\n\n${result}\n\nFICHE CORRECTION\n\nConsulte ton enseignant pour la correction d√©taill√©e de ces exercices.`;
      } else if (studentIndex === -1) {
        // Seulement la correction existe
        reformattedResult = `FICHE √âL√àVE\n\nExercices √† r√©aliser selon les consignes.\n\n${result}`;
      } else if (correctionIndex === -1) {
        // Seulement la fiche √©l√®ve existe
        reformattedResult = `${result}\n\nFICHE CORRECTION\n\nConsulte ton enseignant pour la correction d√©taill√©e de ces exercices.`;
      }
      
      result = reformattedResult;
      console.log('‚ö†Ô∏è R√©ponse reformat√©e pour inclure les sections manquantes');
    } else if (studentIndex > 0) {
      // Supprimer tout texte avant le premier marqueur
      result = result.substring(studentIndex);
      console.log('üîÑ Texte avant FICHE √âL√àVE supprim√©');
    }

    // V√©rifier si des tableaux sont pr√©sents et les convertir en listes
    if (result.includes('|') && (result.includes('---') || result.includes('+-'))) {
      console.log('‚ö†Ô∏è Tableaux d√©tect√©s, tentative de conversion en listes...');
      result = convertTableToList(result);
    }

    console.log('‚úÖ G√©n√©ration finale pr√™te √† √™tre envoy√©e');
    
    return new Response(
      JSON.stringify({ exercises: result }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});

// Fonction utilitaire pour d√©tecter si la demande concerne une diff√©renciation
function isDifferentiationRequest(params: any): boolean {
  return params.isDifferentiation === true || 
         (params.originalExercise && params.studentProfile);
}

// Fonction pour construire un prompt de diff√©renciation
function buildDifferentiationPrompt(params: any): string {
  return `Adapte cet exercice de ${params.subject} (niveau ${params.classLevel}) pour un √©l√®ve avec le profil suivant:

EXERCICE ORIGINAL:
${params.originalExercise}

PROFIL DE L'√âL√àVE:
${params.studentProfile}
${params.learningDifficulties ? `Difficult√©s d'apprentissage: ${params.learningDifficulties}` : ''}
${params.challenges ? `D√©fis sp√©cifiques: ${params.challenges}` : ''}
${params.additionalInstructions ? `Instructions suppl√©mentaires: ${params.additionalInstructions}` : ''}

DIRECTIVES:
- Adapte la difficult√© et la clart√© sans changer l'objectif p√©dagogique fondamental
- Simplifie ou reformule les consignes si n√©cessaire
- Structure clairement les √©tapes de r√©solution
- Ajoute des indices ou des exemples si pertinent
- NE JAMAIS utiliser de tableaux HTML ou Markdown
- Fournis une correction d√©taill√©e avec explications p√©dagogiques adapt√©es au profil de l'√©l√®ve

RAPPEL: G√©n√®re directement les deux sections "FICHE √âL√àVE" suivie de "FICHE CORRECTION", sans introduction ni titre suppl√©mentaire.`;
}

// Fonction pour construire un prompt standard
function buildStandardPrompt(params: any): string {
  return `Cr√©e des exercices de ${params.subject} pour une classe de ${params.classLevel}.
Objectif principal: ${params.objective}
${params.exerciseType ? `Type d'exercices souhait√©: ${params.exerciseType}` : ''}
${params.numberOfExercises ? `Nombre d'exercices souhait√©: ${params.numberOfExercises}` : ''}
${params.questionsPerExercise ? `Nombre de questions par exercice: ${params.questionsPerExercise}` : ''}
${params.specificNeeds ? `Besoins sp√©cifiques: ${params.specificNeeds}` : ''}
${params.additionalInstructions ? `Instructions suppl√©mentaires: ${params.additionalInstructions}` : ''}

DIRECTIVES IMPORTANTES:
- Les exercices doivent √™tre progressifs en difficult√©
- Chaque exercice doit avoir un objectif d'apprentissage clair
- Respecte le niveau scolaire indiqu√©
- Les consignes doivent √™tre claires et pr√©cises
- NE JAMAIS utiliser de tableaux HTML ou Markdown
- Utilise des listes num√©rot√©es ou des puces pour structurer le contenu
- Fournis une correction D√âTAILL√âE avec explications p√©dagogiques

RAPPEL: G√©n√®re directement les deux sections "FICHE √âL√àVE" suivie de "FICHE CORRECTION", sans introduction ni titre suppl√©mentaire.`;
}

// Fonction utilitaire pour convertir des tableaux en listes
function convertTableToList(text: string): string {
  // Fonction pour traiter les tableaux ligne par ligne
  const processLines = (lines: string[]): string[] => {
    // Ignorer les lignes d'en-t√™te/s√©paration
    const contentLines = lines.filter(line => 
      !line.match(/^\s*[+|-]{3,}\s*$/) && 
      line.includes('|')
    );
    
    // Convertir chaque ligne en √©l√©ment de liste
    return contentLines.map(line => {
      // Extraire les cellules en supprimant les | aux extr√©mit√©s et en divisant
      const cells = line.trim()
        .replace(/^\||\|$/g, '')
        .split('|')
        .map(cell => cell.trim());
      
      // Convertir en √©l√©ment de liste
      return `- ${cells.join(': ')}`;
    });
  };

  // Diviser le texte en blocs pour traiter chaque tableau s√©par√©ment
  const sections = text.split(/(FICHE √âL√àVE|FICHE CORRECTION)/g);
  
  // Traiter chaque section
  for (let i = 0; i < sections.length; i++) {
    if (sections[i] !== "FICHE √âL√àVE" && sections[i] !== "FICHE CORRECTION") {
      // Identifier les blocs de tableaux
      const lines = sections[i].split('\n');
      const newLines: string[] = [];
      let tableLines: string[] = [];
      let inTable = false;
      
      // Parcourir chaque ligne
      for (const line of lines) {
        // D√©tecter le d√©but ou la fin d'un tableau
        if ((line.includes('|') && (line.includes('---') || line.includes('+-'))) || 
            (inTable && line.includes('|'))) {
          
          // Si pas encore dans un tableau, marquer le d√©but
          if (!inTable) {
            inTable = true;
          }
          
          tableLines.push(line);
          
          // Si fin de tableau d√©tect√©e par une ligne sans |
        } else if (inTable) {
          // Convertir le tableau en liste
          newLines.push(...processLines(tableLines));
          tableLines = [];
          inTable = false;
          newLines.push(line);
        } else {
          // Ligne normale, pas dans un tableau
          newLines.push(line);
        }
      }
      
      // Traiter un tableau qui se terminerait √† la fin de la section
      if (inTable && tableLines.length > 0) {
        newLines.push(...processLines(tableLines));
      }
      
      // Remplacer la section par la version trait√©e
      sections[i] = newLines.join('\n');
    }
  }
  
  // Recombiner les sections
  return sections.join('');
}
