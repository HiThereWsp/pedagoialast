
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

// Types pour Mistral AI
interface Message {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface GenerationParams {
  subject: string;
  classLevel: string;
  numberOfExercises: number;
  questionsPerExercise: number;
  objective: string;
  exerciseType?: string;
  additionalInstructions?: string;
  specificNeeds?: string;
  originalExercise?: string;
  studentProfile?: string;
  learningDifficulties?: string;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

function buildSystemPrompt(): string {
  return `Tu es un assistant p√©dagogique expert dans la cr√©ation d'exercices scolaires adapt√©s au syst√®me √©ducatif fran√ßais.
Ton objectif est de g√©n√©rer des exercices pertinents, clairs et adapt√©s au niveau demand√©, avec une attention particuli√®re √† la progression p√©dagogique.

Format de r√©ponse STRICT √† suivre :

FICHE √âL√àVE
- Titre de la s√©quence
- Objectifs d'apprentissage clairement √©nonc√©s
- Exercices num√©rot√©s avec consignes pr√©cises
- Espace de r√©ponse clairement d√©limit√©
- Conseils m√©thodologiques si n√©cessaire

FICHE CORRECTION √âL√àVE
- Corrections d√©taill√©es pas √† pas
- Explications adapt√©es au niveau
- M√©thodes et astuces pour comprendre
- Points cl√©s √† retenir
- Auto-√©valuation sugg√©r√©e

FICHE P√âDAGOGIQUE
- Objectifs p√©dagogiques d√©taill√©s
- Pr√©requis n√©cessaires
- Points d'attention particuliers
- Suggestions de diff√©renciation
- Erreurs courantes √† anticiper
- Crit√®res d'√©valuation
- Prolongements possibles`
}

function buildPrompt(params: GenerationParams): Message[] {
  const messages: Message[] = [
    {
      role: 'system',
      content: buildSystemPrompt()
    }
  ]

  let userPrompt = `Je souhaite cr√©er ${params.numberOfExercises} exercices de ${params.subject} pour une classe de ${params.classLevel}.

CONTEXTE P√âDAGOGIQUE :
- Objectif p√©dagogique : ${params.objective}
${params.exerciseType ? `- Type d'exercice souhait√© : ${params.exerciseType}` : ''}
${params.additionalInstructions ? `- Instructions sp√©cifiques : ${params.additionalInstructions}` : ''}

${params.specificNeeds ? `ADAPTATIONS P√âDAGOGIQUES :
- Besoins sp√©cifiques : ${params.specificNeeds}
${params.studentProfile ? `- Profil de l'√©l√®ve : ${params.studentProfile}` : ''}
${params.learningDifficulties ? `- Difficult√©s d'apprentissage : ${params.learningDifficulties}` : ''}` : ''}

FORMAT DEMAND√â :
- ${params.numberOfExercises} exercices
- ${params.questionsPerExercise} questions par exercice
- Progression logique dans la difficult√©
- Exercices courts et cibl√©s`

  messages.push({
    role: 'user',
    content: userPrompt
  })

  return messages
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  const startTime = Date.now()
  try {
    const MISTRAL_API_KEY = Deno.env.get('MISTRAL_API_KEY')
    if (!MISTRAL_API_KEY) {
      throw new Error('Cl√© API Mistral non configur√©e')
    }

    const params = await req.json()
    console.log('üîµ D√©but de la g√©n√©ration:', {
      subject: params.subject,
      classLevel: params.classLevel,
      numberOfExercises: params.numberOfExercises,
      timestamp: new Date().toISOString()
    })

    // Validation des param√®tres requis
    if (!params.subject || !params.classLevel || !params.objective) {
      throw new Error('Param√®tres requis manquants')
    }

    const messages = buildPrompt(params)

    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'mistral-large-latest',
        messages: messages,
        temperature: 0.3, // R√©duit pour plus de pr√©cision
        max_tokens: 1500, // Optimis√© pour la concision
        top_p: 0.9 // Ajout√© pour plus de coh√©rence
      })
    })

    if (!response.ok) {
      const error = await response.text()
      console.error('‚ùå Erreur Mistral AI:', error)
      throw new Error(`Erreur API Mistral: ${response.status}`)
    }

    const data = await response.json()
    const content = data.choices[0].message.content

    // Log des m√©triques de g√©n√©ration
    const endTime = Date.now()
    const duration = endTime - startTime
    console.log('‚úÖ G√©n√©ration r√©ussie:', {
      duration_ms: duration,
      estimated_tokens: content.length / 4, // Estimation approximative
      subject: params.subject,
      timestamp: new Date().toISOString()
    })

    return new Response(
      JSON.stringify({ exercises: content }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error)
    
    return new Response(
      JSON.stringify({ 
        error: 'Une erreur est survenue lors de la g√©n√©ration des exercices', 
        details: error.message 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})
