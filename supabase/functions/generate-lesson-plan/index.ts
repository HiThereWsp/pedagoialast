
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import "https://deno.land/x/xhr@0.1.0/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  console.log('üöÄ D√©marrage de la fonction generate-lesson-plan')
  const startTime = Date.now()

  try {
    const { 
      subject, 
      classLevel, 
      text,
      subject_matter,
      totalSessions,
      additionalInstructions
    } = await req.json()
    
    // Validation des entr√©es pour √©viter les prompts vides ou invalides
    if (!classLevel) {
      throw new Error('Le niveau de classe (classLevel) est requis')
    }
    
    if (!subject_matter) {
      throw new Error('La mati√®re (subject_matter) est requise')
    }

    // Construction d'un prompt plus sp√©cifique et contextualis√©
    let prompt = `En tant qu'expert en p√©dagogie de l'√âducation Nationale fran√ßaise, cr√©ez une s√©quence p√©dagogique d√©taill√©e pour le niveau ${classLevel} en ${subject_matter}.`

    // Ajouter des d√©tails sur la mati√®re et le sujet sp√©cifique
    prompt += `\n\nMati√®re : ${subject_matter} (${subject || 'Sujet g√©n√©ral'})`
    prompt += `\nNombre de s√©ances : ${totalSessions || '4'}`
    
    // Ajouter les objectifs d'apprentissage si fournis
    if (text) {
      prompt += `\n\nObjectifs d'apprentissage pr√©cis : ${text}`
    }
    
    // Ajouter des instructions suppl√©mentaires si fournies
    if (additionalInstructions) {
      prompt += `\n\nInstructions sp√©cifiques de l'enseignant : ${additionalInstructions}`
    }

    // Ajout d'instructions explicites pour √©viter les ambigu√Øt√©s
    prompt += `\n\nATTENTION : La s√©quence doit √™tre sp√©cifiquement dans le domaine de ${subject_matter} et traiter uniquement de "${subject || 'ce sujet'}". Ne pas aborder d'autres domaines sauf si explicitement demand√©.`

    prompt += `\n\nFormat souhait√© de la s√©quence :
1. Objectifs d'apprentissage
2. Pr√©requis
3. Dur√©e estim√©e (${totalSessions || '4'} s√©ances)
4. Mat√©riel n√©cessaire
5. D√©roulement d√©taill√© :
   - Phase 1 : Introduction
   - Phase 2 : D√©veloppement
   - Phase 3 : Application
   - Phase 4 : Conclusion
6. √âvaluation
7. Prolongements possibles`

    console.log(`‚è±Ô∏è Temps de pr√©paration du prompt: ${Date.now() - startTime}ms`)
    console.log(`üìù Envoi du prompt √† OpenAI pour g√©n√©rer une s√©quence en ${subject_matter} sur "${subject}"`)

    // R√©cup√©ration et validation de la cl√© API
    const openAIKey = Deno.env.get('OPENAI_API_KEY')
    if (!openAIKey) {
      throw new Error('Cl√© API OpenAI manquante')
    }

    // Configuration avanc√©e de la requ√™te avec timeout
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 60000) // 60 secondes de timeout

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini', // Mod√®le plus rapide et efficace
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en p√©dagogie sp√©cialis√© dans la cr√©ation de s√©quences p√©dagogiques pour l\'Education Nationale fran√ßaise. Tu connais parfaitement les programmes scolaires et les recommandations officielles. Tu dois cr√©er des contenus pr√©cis, adapt√©s au niveau demand√© et strictement dans la mati√®re indiqu√©e.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2048, // Limiter la longueur pour √©viter les timeout
        }),
        signal: controller.signal,
      })

      clearTimeout(timeoutId) // Nettoyer le timeout si la requ√™te r√©ussit avant
      
      if (!response.ok) {
        const errorData = await response.json()
        console.error(`‚ùå Erreur API OpenAI (${response.status}):`, errorData)
        throw new Error(`Erreur API OpenAI: ${response.statusText}`)
      }

      const data = await response.json()
      const lessonPlan = data.choices[0].message.content

      console.log(`‚úÖ S√©quence g√©n√©r√©e avec succ√®s en ${Date.now() - startTime}ms`)
      console.log(`üìä Taille de la s√©quence: ${lessonPlan.length} caract√®res`)

      return new Response(
        JSON.stringify({ 
          lessonPlan,
          metrics: {
            contentLength: lessonPlan.length,
            generationTimeMs: Date.now() - startTime
          }
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    } catch (abortError) {
      clearTimeout(timeoutId)
      if (abortError.name === 'AbortError') {
        console.error('‚è±Ô∏è Requ√™te interrompue par timeout')
        throw new Error('La requ√™te a pris trop de temps et a √©t√© interrompue')
      }
      throw abortError
    }
  } catch (error) {
    console.error('‚ùå Erreur dans la fonction generate-lesson-plan:', error)
    
    // Message d'erreur am√©lior√© pour aider au d√©bogage
    const errorMessage = error.message || 'Erreur inconnue'
    const errorDetails = error.stack || ''
    
    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: errorDetails,
        timestamp: new Date().toISOString()
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  } finally {
    console.log(`üèÅ Temps total d'ex√©cution: ${Date.now() - startTime}ms`)
  }
})
